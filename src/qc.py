# -*- coding: utf-8 -*-
"""Quality_Control.ipynb

Automatically generated by Colaboratory.

"""

import pandas as pd



def main():
  #Step 0: Merge Answer File with Original Questions
  df_ans = pd.read_csv('../data/qc_answersIn.csv')
  df_response = pd.read_csv('../data/qc_sampleIn.csv')
  df = mergeAnsWithResponse(df_response, df_ans)
  #Step 1: Add weights to each row

  df['weight_yes'] = df.apply(lambda x: 
                          give_weights_yes(x['iata'], x['a1'], x['a2'], x['a3'], x['ca1'], x['ca2'], x['ca3']), axis = 1)

  df['weight_no'] = df.apply(lambda x: 
                          give_weights_no(x['iata'], x['a1'], x['a2'], x['a3'], x['ca1'], x['ca2'], x['ca3']), axis = 1)


  df['weight_nah'] = df.apply(lambda x: 
                          give_weights_nah(x['iata'], x['a1'], x['a2'], x['a3'], x['ca1'], x['ca2'], x['ca3']), axis = 1)


  df['weight_esh'] = df.apply(lambda x: 
                          give_weights_esh(x['iata'], x['a1'], x['a2'], x['a3'], x['ca1'], x['ca2'], x['ca3']), axis = 1)

  #Step 2: group by post
  df_grouped = df.groupby(['postID']).sum()
  #Step 3: majority vote

  df_grouped['vote'] = df_grouped.apply(lambda x: majority_vote(x), axis =1)
  df_grouped.to_csv('/data/qc_outputWeight.csv')

if __name__ == '__main__':
    main()

#Step 0: Merge Answer File with Original Questions

def mergeAnsWithResponse(df_orig, df_ans):
  df_new = df_orig.copy()
  dfMerged = df_new.merge(df_ans, on="postID", validate="m:1")
  return dfMerged

#Step 1: Add weights to each row
def give_weights_yes(iata, a1, a2, a3, ca1, ca2, ca3):
  if iata == 'yes':
    if (a1 != ca1 and a2 != ca2 and a3 != ca3):
      return 0.25
    else:
      return 1
  else:
    return 0

def give_weights_no(iata, a1, a2, a3, ca1, ca2, ca3):
  if iata == 'no':
    if (a1 != ca1 and a2 != ca2 and a3 != ca3):
      return 0.25
    else:
      return 1
  else:
    return 0

def give_weights_nah(iata, a1, a2, a3, ca1, ca2, ca3):
  if iata == 'nah':
    if (a1 != ca1 and a2 != ca2 and a3 != ca3):
      return 0.25
    else:
      return 1
  else:
    return 0

def give_weights_esh(iata, a1, a2, a3, ca1, ca2, ca3):
  if iata == 'esh':
    if (a1 != ca1 and a2 != ca2 and a3 != ca3):
      return 0.25
    else:
      return 1
  else:
    return 0


# df['weight_yes'] = df.apply(lambda x: 
#                         give_weights_yes(x['iata'], x['a1'], x['a2'], x['a3'], x['ca1'], x['ca2'], x['ca3']), axis = 1)

# df['weight_no'] = df.apply(lambda x: 
#                         give_weights_no(x['iata'], x['a1'], x['a2'], x['a3'], x['ca1'], x['ca2'], x['ca3']), axis = 1)


# df['weight_nah'] = df.apply(lambda x: 
#                         give_weights_nah(x['iata'], x['a1'], x['a2'], x['a3'], x['ca1'], x['ca2'], x['ca3']), axis = 1)


# df['weight_esh'] = df.apply(lambda x: 
#                         give_weights_esh(x['iata'], x['a1'], x['a2'], x['a3'], x['ca1'], x['ca2'], x['ca3']), axis = 1)

# df

# #Step 2: group by post
# df_grouped = df.groupby(['postID']).sum()
# df_grouped

#Step 3: majority vote
def majority_vote(s):
  max = s[0]
  index = 'yes'
  if s[1] > max:
    max = s[1]
    index = 'no'
  if s[2] > max:
    max = s[2]
    index = 'nah'
  if s[3] > max:
    max = s[3]
    index = 'esh'

  return index

# df_grouped['vote'] = df_grouped.apply(lambda x: majority_vote(x), axis =1)

# df_grouped
